# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-bjwjfX7vID54AcqLueJhIhZMklYqyk
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# -----------------------------
# Load model and tokenizer
# -----------------------------
model_name = "tiiuae/falcon-7b-instruct"   # safer, publicly available instruct model

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure pad token is set
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# -----------------------------
# Function: Generate response
# -----------------------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            top_p=0.9,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()


# -----------------------------
# Function: Extract text from PDF
# -----------------------------
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    text = ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

    return text


# -----------------------------
# Function: Eco Tips Generator
# -----------------------------
def eco_tips_generator(problem_keywords):
    prompt = f"Generate practical and actionable eco-friendly tips for sustainable living related to: {problem_keywords}."
    return generate_response(prompt, max_length=300)


# -----------------------------
# Function: Policy Summarization
# -----------------------------
def policy_summarization(pdf_file, policy_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
    else:
        content = policy_text

    summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{content}"
    return generate_response(summary_prompt, max_length=500)


# -----------------------------
# Gradio Interface
# -----------------------------
with gr.Blocks() as app:
    gr.Markdown("## üåç Eco Assistant & Policy Analyzer")

    with gr.Tabs():
        # Tab 1: Eco Tips
        with gr.Tab("Eco Tips Generator"):
            with gr.Row():
                with gr.Column():
                    keywords_input = gr.Textbox(label="Environmental Problem / Keywords")
                    tips_output = gr.Textbox(label="Eco-friendly Tips")
                    tips_button = gr.Button("Generate Tips")
            tips_button.click(fn=eco_tips_generator, inputs=keywords_input, outputs=tips_output)

        # Tab 2: Policy Analyzer
        with gr.Tab("Policy Summarizer"):
            with gr.Row():
                with gr.Column():
                    pdf_input = gr.File(label="Upload Policy PDF", file_types=[".pdf"])
                    text_input = gr.Textbox(label="Or Paste Policy Text")
                    summary_output = gr.Textbox(label="Policy Summary")
                    summary_button = gr.Button("Summarize Policy")
            summary_button.click(fn=policy_summarization, inputs=[pdf_input, text_input], outputs=summary_output)

# Launch app
app.launch()